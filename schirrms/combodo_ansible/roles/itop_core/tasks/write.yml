# task write.yml, part of role itop_core
# Just a conversion of itop_core_write role into a write task member of itop_core role
# Schirrms 2024-08-28
#
# @copyright   Copyright (C) 2023 Combodo SARL
# @license     http://opensource.org/licenses/AGPL-3.0
#
# This playbook writes a CI in iTop i.e. checks if a CI exists, creates it if not and updates it otherwise.
#
# Common role input parameters:
#  mandatory:
#  - itop_core_root                 = Root URL of the iTop application
#  either:
#  - itop_core_ws_auth_user         = User login
#  - itop_core_ws_auth_pwd          = User password
#  or:
#  - itop_core_ws_auth_token        = User token (token takes precedence over user/password)
#  optional:
#  - itop_core_ws_version           = Web Service version (default 1.3)
#  - itop_core_ws_ansible_uuid      = UUID in iTop of the Ansible application to work with (default ANS_APP1)
#  - itop_core_ws_ansible_inventory = Name of the inventory to consider (no use for a read, default ANS_ITOP)

# Task specific input parameters:
#  mandatory:
#  - itop_core_write_obj_class      = Class of CI to be written
#  - itop_core_write_key            = Set of attributes to be used for the reconciliation
#  - itop_core_write_fields         = Set of attributes to be sent back
#  optional:
#  - itop_core_write_output_fields  = List of attributes to get from iTop in
#                                     'itop_core_write_output_values' dict once creation or update is done.
#                                     if itop_core_write_output_fields is not set, 'itop_core_write_output_values'
#                                     dict is loaded with the 'itop_core_write_fields' set
#  - itop_core_write_create_comment = A comment set in iTop while creating an object
#  - itop_core_write_update_comment = A comment set in iTop while updating an object

# Please, refer to iTop's wiki about REST/JSON services for more details on these parameters.
#
# Output parameters:
#  - itop_core_write_code           = Return code sent by iTop's API
#  - itop_core_write_message        = Error message sent by iTop's API
#  - itop_core_write_obj_key        = Key of the created or updated CI
#  - itop_core_write_output_values  = values of the fields after creation/update
#
---

- name: Check authentication variables
  ansible.builtin.fail:
    msg: "Either both itop_core_ws_auth_user and itop_core_ws_auth_pwd must be set and non-empty, \
          or itop_core_ws_auth_token must be set and contain at least 60 characters."
  when: not
    ((itop_core_ws_auth_user is defined and itop_core_ws_auth_user | length > 0 and
      itop_core_ws_auth_pwd is defined and itop_core_ws_auth_pwd | length > 0) or
     (itop_core_ws_auth_token is defined and itop_core_ws_auth_token | length >= 60))

- name: Build control list
  ansible.builtin.set_fact:
    __itop_core_write_fields_list: "{{ itop_core_write_fields.keys() | join(', ') }}"

- name: Set authentication method
  ansible.builtin.set_fact:
    __auth_method: "{{ 'token' if itop_core_ws_auth_token is defined and itop_core_ws_auth_token | length >= 60 else 'basic' }}"


- name: Check if CI exists
  block:
    - name: Call operation core/get (Basic Auth)
      ansible.builtin.uri:
        url: "{{ __itop_core_api_url }}"
        method: POST
        force_basic_auth: true
        url_username: "{{ itop_core_ws_auth_user }}"
        url_password: "{{ itop_core_ws_auth_pwd }}"
        body: "json_data= { \
          \"operation\":\"core/get\", \
          \"class\":\"{{ itop_core_write_obj_class }}\", \
          \"key\":{{ itop_core_write_key | to_json }}, \
          \"output_fields\":\"{{ __itop_core_write_fields_list }}\" \
          }"
        return_content: true
      register: __itop_core_write_response_basic
      when: __auth_method == 'basic'

    - name: Call operation core/get (Token Auth)
      ansible.builtin.uri:
        url: "{{ __itop_core_api_url }}"
        method: POST
        body: "auth_token={{ itop_core_ws_auth_token }}&json_data= { \
          \"operation\":\"core/get\", \
          \"class\":\"{{ itop_core_write_obj_class }}\", \
          \"key\":{{ itop_core_write_key | to_json }}, \
          \"output_fields\":\"{{ __itop_core_write_fields_list }}\" \
          }"
        return_content: true
      register: __itop_core_write_response_token
      when: __auth_method == 'token'

    - name: Save the Json data
      ansible.builtin.set_fact:
        __itop_core_write_jsondata: "{{ __itop_core_write_response_basic.content | from_json if __auth_method == 'basic' \
                                      else __itop_core_write_response_token.content | from_json }}"

    - name: Get error code and message
      ansible.builtin.set_fact:
        itop_core_write_code: "{{ __itop_core_write_jsondata | json_query('code') }}"
        itop_core_write_message: "{{ __itop_core_write_jsondata | json_query('message') }}"

    - name: Display error, if any
      ansible.builtin.fail:
        msg: "{{ itop_core_write_message }}"
      when: itop_core_write_code != "0"

    - name: Get itop_obj_key
      ansible.builtin.set_fact:
        itop_core_write_obj_key: "{{ __itop_core_write_jsondata | json_query(param) }}"
      vars:
        param: 'objects.*.key'

    - name: Get fields
      ansible.builtin.set_fact:
        __itop_core_write_get_fields: "{{ __itop_core_write_jsondata | json_query(param) }}"
      vars:
        param: 'objects.*.fields'

- name: Create CI
  when: itop_core_write_obj_key == "0" or itop_core_write_obj_key == ""
  block:
    - name: Call operation core/create (Basic Auth)
      ansible.builtin.uri:
        url: "{{ __itop_core_api_url }}"
        method: POST
        force_basic_auth: true
        url_username: "{{ itop_core_ws_auth_user }}"
        url_password: "{{ itop_core_ws_auth_pwd }}"
        body: "json_data= { \
          \"operation\":\"core/create\", \
          \"comment\":\"{{ itop_core_write_create_comment }}\", \
          \"class\":\"{{ itop_core_write_obj_class }}\", \
          \"fields\":{{ itop_core_write_fields | to_json }}, \
          \"output_fields\":\"{{ __itop_core_write_fields_list }}\" \
          }"
        return_content: true
      register: __itop_core_write_response_basic
      when:
        - itop_core_write_obj_key == "0" or itop_core_write_obj_key == ""
        - __auth_method == 'basic'

    - name: Call operation core/create (Token Auth)
      ansible.builtin.uri:
        url: "{{ __itop_core_api_url }}"
        method: POST
        body: "auth_token={{ itop_core_ws_auth_token }}&json_data= { \
          \"operation\":\"core/create\", \
          \"comment\":\"{{ itop_core_write_create_comment }}\", \
          \"class\":\"{{ itop_core_write_obj_class }}\", \
          \"fields\":{{ itop_core_write_fields | to_json }}, \
          \"output_fields\":\"{{ __itop_core_write_fields_list }}\" \
          }"
        return_content: true
      register: __itop_core_write_response_token
      when:
        - itop_core_write_obj_key == "0" or itop_core_write_obj_key == ""
        - __auth_method == 'token'

    - name: Save the Json data
      ansible.builtin.set_fact:
        __itop_core_write_jsondata: "{{ __itop_core_write_response_basic.content | from_json if __auth_method == 'basic' \
                                      else __itop_core_write_response_token.content | from_json }}"

    - name: Get error code and message # noqa: jinja[invalid]
      ansible.builtin.set_fact:
        itop_core_write_code: "{{ __itop_core_write_jsondata | json_query('code') }}"
        itop_core_write_message: "{{ __itop_core_write_jsondata | json_query('message') }}"

    - name: Display error, if any
      ansible.builtin.fail:
        msg: "{{ itop_core_write_message }}"
      when: itop_core_write_code != "0"

    - name: Register operation
      ansible.builtin.set_fact:
        __itop_core_write_operation: "{{ 'been created' }}"
      changed_when: itop_core_write_code == "0"

- name: Update CI
  when: itop_core_write_obj_key != "0" and itop_core_write_obj_key != ""
  block:
    - name: Call operation core/update (Basic Auth)
      ansible.builtin.uri:
        url: "{{ __itop_core_api_url }}"
        method: POST
        force_basic_auth: true
        url_username: "{{ itop_core_ws_auth_user }}"
        url_password: "{{ itop_core_ws_auth_pwd }}"
        body: "json_data= { \
          \"operation\":\"core/update\", \
          \"comment\":\"{{ itop_core_write_update_comment }}\", \
          \"class\":\"{{ itop_core_write_obj_class }}\", \
          \"key\":{{ itop_core_write_key | to_json }}, \
          \"fields\":{{ itop_core_write_fields | to_json }}, \
          \"output_fields\":\"{{ __itop_core_write_fields_list }}\" \
          }"
        return_content: true
      register: __itop_core_write_response_basic
      when: __auth_method == 'basic'

    - name: Call operation core/update (Token Auth)
      ansible.builtin.uri:
        url: "{{ __itop_core_api_url }}"
        method: POST
        body: "auth_token={{ itop_core_ws_auth_token }}&json_data= { \
          \"operation\":\"core/update\", \
          \"comment\":\"{{ itop_core_write_update_comment }}\", \
          \"class\":\"{{ itop_core_write_obj_class }}\", \
          \"key\":{{ itop_core_write_key | to_json }}, \
          \"fields\":{{ itop_core_write_fields | to_json }}, \
          \"output_fields\":\"{{ __itop_core_write_fields_list }}\" \
          }"
        return_content: true
      register: __itop_core_write_response_token
      when: __auth_method == 'token'

    - name: Save the Json data
      ansible.builtin.set_fact:
        __itop_core_write_jsondata: "{{ __itop_core_write_response_basic.content | from_json if __auth_method == 'basic' \
                                      else __itop_core_write_response_token.content | from_json }}"

    - name: Get error code and message
      ansible.builtin.set_fact:
        itop_core_write_code: "{{ __itop_core_write_jsondata | json_query('code') }}"
        itop_core_write_message: "{{ __itop_core_write_jsondata | json_query('message') }}"

    - name: Display error, if any
      ansible.builtin.fail:
        msg: "{{ itop_core_write_message }}"
      when: itop_core_write_code != "0"

    - name: Get fields
      ansible.builtin.set_fact:
        __itop_core_write_set_fields: "{{ __itop_core_write_jsondata | json_query(param) }}"
      vars:
        param: 'objects.*.fields'

    - name: Register operation
      ansible.builtin.set_fact:
        __itop_core_write_operation: "{{ 'been updated' }}"
      changed_when: __itop_core_write_get_fields != __itop_core_write_set_fields
      when: __itop_core_write_get_fields != __itop_core_write_set_fields

    - name: Register no change
      ansible.builtin.set_fact:
        __itop_core_write_operation: "{{ 'not been modified' }}"
      when: __itop_core_write_get_fields == __itop_core_write_set_fields

- name: Operation is successful at this stage
  block:
    - name: Get itop_obj_key
      ansible.builtin.set_fact:
        itop_core_write_obj_key: "{{ __itop_core_write_jsondata | json_query(param) }}"
      vars:
        param: 'objects.*.key'

    - name: Display itop_obj_key
      ansible.builtin.debug:
        msg: >
          "Object of class {{ itop_core_write_obj_class }}
          with key {{ itop_core_write_obj_key }} has {{ __itop_core_write_operation }}"

    - name: Set returned variables
      ansible.builtin.set_fact:
        itop_core_write_code: = "0"
        # itop_core_write_obj_key: "{{ itop_core_write_obj_key }}"

    - name: Set default value to return
      ansible.builtin.set_fact:
        __itop_core_write_out_fields: "{{ __itop_core_write_fields_list }}"

    - name: Select values to return
      ansible.builtin.set_fact:
        __itop_core_write_out_fields: "{{ itop_core_write_output_fields.keys() | join(', ') }}"
      when:
        - itop_core_write_output_fields is defined
        - itop_core_write_output_fields|count > 0

    - name: Get actual values (Basic Auth)
      ansible.builtin.uri:
        url: "{{ __itop_core_api_url }}"
        method: POST
        force_basic_auth: true
        url_username: "{{ itop_core_ws_auth_user }}"
        url_password: "{{ itop_core_ws_auth_pwd }}"
        body: "json_data= { \
          \"operation\":\"core/get\", \
          \"class\":\"{{ itop_core_write_obj_class }}\", \
          \"key\":{{ itop_core_write_key | to_json }}, \
          \"output_fields\":\"{{ __itop_core_write_out_fields }}\" \
          }"
        return_content: true
      register: __itop_core_write_response_basic
      when: __auth_method == 'basic'

    - name: Get actual values (Token Auth)
      ansible.builtin.uri:
        url: "{{ __itop_core_api_url }}"
        method: POST
        body: "auth_token={{ itop_core_ws_auth_token }}&json_data= { \
          \"operation\":\"core/get\", \
          \"class\":\"{{ itop_core_write_obj_class }}\", \
          \"key\":{{ itop_core_write_key | to_json }}, \
          \"output_fields\":\"{{ __itop_core_write_out_fields }}\" \
          }"
        return_content: true
      register: __itop_core_write_response_token
      when: __auth_method == 'token'

    - name: Save the Json data
      ansible.builtin.set_fact:
        __itop_core_write_jsondata: "{{ __itop_core_write_response_basic.content | from_json if __auth_method == 'basic' \
                                      else __itop_core_write_response_token.content | from_json }}"

    - name: Get error code and message
      ansible.builtin.set_fact:
        itop_core_write_code: "{{ __itop_core_write_jsondata | json_query('code') }}"
        itop_core_write_message: "{{ __itop_core_write_jsondata | json_query('message') }}"

    - name: Display error, if any
      ansible.builtin.fail:
        msg: "{{ itop_core_write_message }}"
      when: itop_core_write_code != "0"

    - name: Get fields
      ansible.builtin.set_fact:
        itop_core_write_output_values: "{{ __itop_core_write_jsondata | json_query(param) }}"
      vars:
        param: 'objects.*.fields'
